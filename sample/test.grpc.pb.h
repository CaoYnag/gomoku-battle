// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto
#ifndef GRPC_test_2eproto__INCLUDED
#define GRPC_test_2eproto__INCLUDED

#include "test.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

class Test final {
 public:
  static constexpr char const* service_full_name() {
    return "Test";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status say(::grpc::ClientContext* context, const ::req& request, ::rpl* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpl>> Asyncsay(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpl>>(AsyncsayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpl>> PrepareAsyncsay(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpl>>(PrepareAsyncsayRaw(context, request, cq));
    }
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::g& request, ::g* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>> Asyncstart(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>> PrepareAsyncstart(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status end(::grpc::ClientContext* context, const ::g& request, ::g* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>> Asyncend(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>>(AsyncendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>> PrepareAsyncend(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::g>>(PrepareAsyncendRaw(context, request, cq));
    }
    virtual ::grpc::Status send(::grpc::ClientContext* context, const ::data& request, ::size* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::size>> Asyncsend(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::size>>(AsyncsendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::size>> PrepareAsyncsend(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::size>>(PrepareAsyncsendRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void say(::grpc::ClientContext* context, const ::req* request, ::rpl* response, std::function<void(::grpc::Status)>) = 0;
      virtual void say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpl* response, std::function<void(::grpc::Status)>) = 0;
      virtual void say(::grpc::ClientContext* context, const ::req* request, ::rpl* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpl* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void start(::grpc::ClientContext* context, const ::g* request, ::g* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start(::grpc::ClientContext* context, const ::g* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void end(::grpc::ClientContext* context, const ::g* request, ::g* response, std::function<void(::grpc::Status)>) = 0;
      virtual void end(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, std::function<void(::grpc::Status)>) = 0;
      virtual void end(::grpc::ClientContext* context, const ::g* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void end(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void send(::grpc::ClientContext* context, const ::data* request, ::size* response, std::function<void(::grpc::Status)>) = 0;
      virtual void send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::size* response, std::function<void(::grpc::Status)>) = 0;
      virtual void send(::grpc::ClientContext* context, const ::data* request, ::size* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::size* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpl>* AsyncsayRaw(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpl>* PrepareAsyncsayRaw(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g>* AsyncstartRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g>* AsyncendRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::g>* PrepareAsyncendRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::size>* AsyncsendRaw(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::size>* PrepareAsyncsendRaw(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status say(::grpc::ClientContext* context, const ::req& request, ::rpl* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpl>> Asyncsay(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpl>>(AsyncsayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpl>> PrepareAsyncsay(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpl>>(PrepareAsyncsayRaw(context, request, cq));
    }
    ::grpc::Status start(::grpc::ClientContext* context, const ::g& request, ::g* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>> Asyncstart(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>> PrepareAsyncstart(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status end(::grpc::ClientContext* context, const ::g& request, ::g* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>> Asyncend(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>>(AsyncendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>> PrepareAsyncend(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::g>>(PrepareAsyncendRaw(context, request, cq));
    }
    ::grpc::Status send(::grpc::ClientContext* context, const ::data& request, ::size* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::size>> Asyncsend(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::size>>(AsyncsendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::size>> PrepareAsyncsend(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::size>>(PrepareAsyncsendRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void say(::grpc::ClientContext* context, const ::req* request, ::rpl* response, std::function<void(::grpc::Status)>) override;
      void say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpl* response, std::function<void(::grpc::Status)>) override;
      void say(::grpc::ClientContext* context, const ::req* request, ::rpl* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void say(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpl* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void start(::grpc::ClientContext* context, const ::g* request, ::g* response, std::function<void(::grpc::Status)>) override;
      void start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, std::function<void(::grpc::Status)>) override;
      void start(::grpc::ClientContext* context, const ::g* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void end(::grpc::ClientContext* context, const ::g* request, ::g* response, std::function<void(::grpc::Status)>) override;
      void end(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, std::function<void(::grpc::Status)>) override;
      void end(::grpc::ClientContext* context, const ::g* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void end(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::g* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void send(::grpc::ClientContext* context, const ::data* request, ::size* response, std::function<void(::grpc::Status)>) override;
      void send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::size* response, std::function<void(::grpc::Status)>) override;
      void send(::grpc::ClientContext* context, const ::data* request, ::size* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::size* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpl>* AsyncsayRaw(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpl>* PrepareAsyncsayRaw(::grpc::ClientContext* context, const ::req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g>* AsyncstartRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g>* AsyncendRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::g>* PrepareAsyncendRaw(::grpc::ClientContext* context, const ::g& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::size>* AsyncsendRaw(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::size>* PrepareAsyncsendRaw(::grpc::ClientContext* context, const ::data& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_say_;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_end_;
    const ::grpc::internal::RpcMethod rpcmethod_send_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status say(::grpc::ServerContext* context, const ::req* request, ::rpl* response);
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::g* request, ::g* response);
    virtual ::grpc::Status end(::grpc::ServerContext* context, const ::g* request, ::g* response);
    virtual ::grpc::Status send(::grpc::ServerContext* context, const ::data* request, ::size* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_say() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status say(::grpc::ServerContext* context, const ::req* request, ::rpl* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsay(::grpc::ServerContext* context, ::req* request, ::grpc::ServerAsyncResponseWriter< ::rpl>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::g* request, ::grpc::ServerAsyncResponseWriter< ::g>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_end : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_end() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_end() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status end(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestend(::grpc::ServerContext* context, ::g* request, ::grpc::ServerAsyncResponseWriter< ::g>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_send() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::data* request, ::size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsend(::grpc::ServerContext* context, ::data* request, ::grpc::ServerAsyncResponseWriter< ::size>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_say<WithAsyncMethod_start<WithAsyncMethod_end<WithAsyncMethod_send<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_say() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::req, ::rpl>(
          [this](::grpc::ServerContext* context,
                 const ::req* request,
                 ::rpl* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->say(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_say(
        ::grpc::experimental::MessageAllocator< ::req, ::rpl>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::req, ::rpl>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status say(::grpc::ServerContext* context, const ::req* request, ::rpl* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void say(::grpc::ServerContext* context, const ::req* request, ::rpl* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_start() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::g, ::g>(
          [this](::grpc::ServerContext* context,
                 const ::g* request,
                 ::g* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->start(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_start(
        ::grpc::experimental::MessageAllocator< ::g, ::g>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g, ::g>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void start(::grpc::ServerContext* context, const ::g* request, ::g* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_end : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_end() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::g, ::g>(
          [this](::grpc::ServerContext* context,
                 const ::g* request,
                 ::g* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->end(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_end(
        ::grpc::experimental::MessageAllocator< ::g, ::g>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::g, ::g>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_end() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status end(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void end(::grpc::ServerContext* context, const ::g* request, ::g* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_send() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::data, ::size>(
          [this](::grpc::ServerContext* context,
                 const ::data* request,
                 ::size* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->send(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_send(
        ::grpc::experimental::MessageAllocator< ::data, ::size>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::data, ::size>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::data* request, ::size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void send(::grpc::ServerContext* context, const ::data* request, ::size* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_say<ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_end<ExperimentalWithCallbackMethod_send<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_say() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status say(::grpc::ServerContext* context, const ::req* request, ::rpl* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_end : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_end() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_end() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status end(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_send() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::data* request, ::size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_say() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status say(::grpc::ServerContext* context, const ::req* request, ::rpl* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_end : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_end() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_end() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status end(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_send() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::data* request, ::size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_say() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->say(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status say(::grpc::ServerContext* context, const ::req* request, ::rpl* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void say(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_start() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->start(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void start(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_end : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_end() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->end(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_end() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status end(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void end(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_send() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->send(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::data* request, ::size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void send(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_say : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_say() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::req, ::rpl>(std::bind(&WithStreamedUnaryMethod_say<BaseClass>::Streamedsay, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_say() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status say(::grpc::ServerContext* context, const ::req* request, ::rpl* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::req,::rpl>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::g, ::g>(std::bind(&WithStreamedUnaryMethod_start<BaseClass>::Streamedstart, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g,::g>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_end : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_end() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::g, ::g>(std::bind(&WithStreamedUnaryMethod_end<BaseClass>::Streamedend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_end() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status end(::grpc::ServerContext* context, const ::g* request, ::g* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::g,::g>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_send() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::data, ::size>(std::bind(&WithStreamedUnaryMethod_send<BaseClass>::Streamedsend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status send(::grpc::ServerContext* context, const ::data* request, ::size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::data,::size>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_say<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_end<WithStreamedUnaryMethod_send<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_say<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_end<WithStreamedUnaryMethod_send<Service > > > > StreamedService;
};


#endif  // GRPC_test_2eproto__INCLUDED
